# -*- coding: utf-8 -*-
"""pneumonia_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IGBm-RTcVm0I1H7er4X1dVFA4srA9QhW
"""

pip install tensorflow numpy matplotlib pandas scikit-learn

from google.colab import drive
drive.mount('/content/drive')

base_dir = '/content/drive/MyDrive/pneumonia_dataset'
train_dir = '/content/drive/MyDrive/pneumonia_dataset/train'
val_dir = '/content/drive/MyDrive/pneumonia_dataset/val'
test_dir = '/content/drive/MyDrive/pneumonia_dataset/test'

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.utils.class_weight import compute_class_weight
import matplotlib.pyplot as plt
import numpy as np

# Data preprocessing and augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=30,
    width_shift_range=0.25,
    height_shift_range=0.25,
    shear_range=0.2,
    zoom_range=0.3,
    horizontal_flip=True,
    fill_mode='nearest'
)

val_test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

val_generator = val_test_datagen.flow_from_directory(
    val_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

# Build CNN model
model = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(128, (3,3), activation='relu'),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2,2)),
    layers.Dropout(0.25),
    layers.Flatten(),
    layers.Dense(512, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

model.compile(
    loss='binary_crossentropy',
    optimizer='adam',
    metrics=['accuracy']
)

class_weights = compute_class_weight(
    'balanced',
    classes=np.unique(train_generator.classes),
    y=train_generator.classes
)
class_weights = dict(enumerate(class_weights))

# Train the model
history = model.fit(
    train_generator,
    epochs=15,
    validation_data=val_generator,
    class_weight=class_weights
)

# Evaluate on test set
test_generator = val_test_datagen.flow_from_directory(
    test_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

test_loss, test_acc = model.evaluate(test_generator)
print(f'Test Accuracy: {test_acc * 100:.2f}%')

model.save('/content/drive/MyDrive/pneumonia_cnn_model.keras')

# Plot training history
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(acc, label='Training Accuracy')
plt.plot(val_acc, label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.title('Accuracy')

plt.subplot(1, 2, 2)
plt.plot(loss, label='Training Loss')
plt.plot(val_loss, label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.title('Loss')

plt.savefig('/content/drive/MyDrive/training_plot.png')
plt.show()

# Classification report
print(classification_report(y_true, y_pred, target_names=['Normal', 'Pneumonia']))

# Example Predictions Visualization
import matplotlib.pyplot as plt
import random

# Get a batch of test images
test_generator.reset()
x_batch, y_batch = next(test_generator)
preds = model.predict(x_batch) > 0.5

# Display 8 random examples
plt.figure(figsize=(10, 6))
for i in range(8):
    idx = random.randint(0, len(x_batch)-1)
    plt.subplot(2, 4, i+1)
    plt.imshow(x_batch[idx])
    plt.title(f"True: {'Pneumonia' if y_batch[idx] else 'Normal'}\n"
              f"Pred: {'Pneumonia' if preds[idx] else 'Normal'}")
    plt.axis('off')
plt.tight_layout()
plt.show()
